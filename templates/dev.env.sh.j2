#!/bin/bash
#set -xv
#shopt -s extglob

# {{ ansible_managed }}

##set -ueo pipefail
#set -eo pipefail

WORKING_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

####################
### READ ARGUMENTS
####################
#How to not Prompt when Installing a Module using cpan
#export PERL_MM_USE_DEFAULT=1
#export PERL_EXTUTILS_AUTOINSTALL="--defaultdeps"

#WORKING_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}"  )" && pwd  )"

source "${HOME}/step-0-color.sh"

#echo -e "${cyan} ARCH : ${ARCH} must be sun4sol sun4 rs6000 hprisc solaris linux cygwin winnt ${NC}"

if [ -z "$PROJECT_USER" ]; then
  echo -e "${yellow} ${double_arrow} Undefined parameter ${head_skull} : PROJECT_USER, use the default one ${NC}"
  export PROJECT_USER={{PROJECT_USER}}
fi

if [ -z "$PROJECT_VERSION" ]; then
  echo -e "${yellow} ${double_arrow} Undefined parameter ${head_skull} : PROJECT_VERSION, use the default one ${NC}"
  export PROJECT_VERSION={{PROJECT_VERSION}}
fi

if [ -z "$DRIVE_PATH" ]; then
  echo -e "${yellow} ${double_arrow} Undefined parameter ${head_skull} : DRIVE_PATH, use the default one ${NC}"
  export DRIVE_PATH={{DRIVE_PATH}}
fi

if [ -z "$PROJECT_HOME" ]; then
  echo -e "${yellow} ${double_arrow} Undefined parameter ${head_skull} : PROJECT_HOME, use the default one ${NC}"
  export PROJECT_HOME={{PROJECT_HOME}}
fi

if [ -z "$WORKSPACE_ENV" ]; then
  echo -e "${yellow} ${double_arrow} Undefined parameter ${head_skull} : WORKSPACE_ENV, use the default one ${NC}"
  export WORKSPACE_ENV={{WORKSPACE_ENV}}
fi

if [ -z "$PROJECT_EXTRACTION" ]; then
  export PROJECT_EXTRACTION={{PROJECT_EXTRACTION}}
fi

if [ -z "$TERM" ]; then
  export TERM={{TERM}}
fi

if [ -z "$EDITOR" ]; then
  export EDITOR={{EDITOR}}
fi
export SVN_EDITOR=${EDITOR}

export PATH=/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin
if [ -d "${HOME}/bin" ]; then
  PATH="${HOME}/bin:$PATH"
fi
if [ -d "${WORKSPACE_ENV}/${ARCH}/bin" ]; then
  PATH="${WORKSPACE_ENV}/${ARCH}/bin:$PATH"
fi
if [ -d "${DRIVE_PATH}/cygwin/bin" ]; then
  PATH="${DRIVE_PATH}/cygwin/bin:$PATH"
fi
if [ -d "/snap/bin" ]; then
  PATH="/snap/bin/:$PATH"
fi

export PROJECT_MAJOR_VERSION=${PROJECT_VERSION}

export PROJECT_BUILD_TYPE={{PROJECT_BUILD_TYPE}}
export CLIENT_SERVER_TYPE={{APP_SERVER_MODE}}

export PROJECT_DEV=${PROJECT_HOME}/${PROJECT_USER}${PROJECT_MAJOR_VERSION}
echo -e "${cyan} PROJECT_USER : ${PROJECT_USER} PROJECT_DEV : ${PROJECT_DEV} ${NC}"
export PROJECT_SRC=${PROJECT_DEV}/${PROJECT_EXTRACTION}
export PROJECT_TARGET_PATH={{PROJECT_TARGET_PATH}}
export PROJECT_USER_PROFILE="${PROJECT_DEV}/env/config/profiles/${PROJECT_USER}${PROJECT_VERSION}.${ARCH}.properties"

export PROJECT_THIRDPARTY_PATH=${DRIVE_PATH}/thirdparty
export PROJECT_RELEASE=${PROJECT_TARGET_PATH}/release/${PROJECT_MAJOR_VERSION}
export PROJECT_PKG=${PROJECT_TARGET_PATH}/pkg/${PROJECT_MAJOR_VERSION}

if [ ! -d $PROJECT_DEV ]; then
  echo "ERROR: Directory ${PROJECT_DEV} doesn't exist!"
  echo -e "${red} ${double_arrow} Directory ${PROJECT_DEV} doesn't exist! ${head_skull} ${NC}"
  exit 1
fi

#This variable must not be set if jenkins is used
if [ -z "$WORKSPACE" ]; then
  echo -e "${yellow} ${double_arrow} Undefined parameter ${head_skull} : WORKSPACE, use the default one ${NC}"
  export WORKSPACE=${PROJECT_DEV}
fi

##
# Cleaning LD_LIBRARY_PATH LIBPATH and CLASSPATH
export CLASSPATH=""
export LD_LIBRARY_PATH=""

# Define LD_LIBRARY_PATH if does not exists
if [ -z "$LD_LIBRARY_PATH" ]; then
  export LD_LIBRARY_PATH
fi

ln -s /media/bitcoin/.bitcoin ~/.bitcoin 2>/dev/null
ln -s /games/.steam ~/.steam 2>/dev/null

ln -s ${PROJECT_DEV} ~/albandrieu30 2>/dev/null
ln -s ${PROJECT_DEV}/anaconda3 ~/anaconda3 2>/dev/null
ln -s -f ${PROJECT_DEV}/ansible-nabla/roles/albanandrieu.shell/files/ansible-env.sh ~/ansible-env.sh 2>/dev/null
ln -s -f ${PROJECT_DEV}/ansible-nabla/roles/albanandrieu.shell/files/docker-env.sh ~/docker-env.sh 2>/dev/null
ln -s -f ${PROJECT_DEV}/ansible-nabla/roles/albanandrieu.shell/files/run-ansible-setup.sh ~/run-ansible-setup.sh 2>/dev/null
ln -s -f ${PROJECT_DEV}/ansible-nabla/roles/albanandrieu.shell/files/run-ansible.sh ~/run-ansible.sh 2>/dev/null
ln -s -f ${PROJECT_DEV}/ansible-nabla/roles/albanandrieu.shell/files/run-python.sh ~/run-python.sh 2>/dev/null
ln -s -f ${PROJECT_DEV}/ansible-nabla/roles/albanandrieu.shell/files/step-0-color.sh ~/step-0-color.sh 2>/dev/null
ln -s -f ${PROJECT_DEV}/ansible-nabla/roles/albanandrieu.shell/files/step-1-os.sh ~/step-1-os.sh 2>/dev/null
ln -s -f ${PROJECT_DEV}/MyConkyConfig/conky ~/.conky 2>/dev/null
ln -s "${PROJECT_DEV}/.conan" ~/.conan 2>/dev/null
ln -s "${PROJECT_DEV}/.m2" ~/.m2 2>/dev/null
ln -s "${PROJECT_DEV}" ~/w 2>/dev/null

export QTDIR={{QT_DIR}}

export ZAPROXY_HOME={{ZAPROXY_HOME}}
export HUDSON_HOME={{HUDSON_HOME}}
export JENKINS_HOME={{JENKINS_HOME}}
export TOMCAT_BASE={{TOMCAT_BASE}}
export TOMCAT_HOME={{TOMCAT_HOME}}
export SONAR_HOME={{SONAR_HOME}}
export SONAR_RUNNER_HOME={{SONAR_RUNNER_HOME}}
export PATH=${SONAR_RUNNER_HOME}/bin:${PATH}
export CYGWIN_HOME=${DRIVE_PATH}/cygwin
export SVN_HOME=${CYGWIN_HOME}/bin
export CROWD_INSTALL={{CROWD_INSTALL}}
export CROWD_HOME={{CROWD_HOME}}
export NEXUS_HOME={{NEXUS_HOME}}
export FISHEYE_HOME={{FISHEYE_HOME}}
export FISHEYE_INST={{FISHEYE_INST}}
export OPENGROK_TOMCAT_BASE={{TOMCAT_HOME}}

export SYBASE_OCS={{SYBASE_OCS}}
export SYBASE_VERSION={{SYBASE_VERSION}}
export SYBASE_HOME=${DRIVE_PATH}/Sybase/${SYBASE_OCS}/

export ORACLE_VERSION={{ORACLE_VERSION}}
export ORACLE_HOME=${DRIVE_PATH}/oraclexe/app/oracle/product/${ORACLE_VERSION}/server

# CMAKE {{CMAKE_MAJOR_VERSION}}
export CMAKE_HOME={{CMAKE_HOME}}
export CMAKE_ROOT=${CMAKE_HOME}

# PYTHON {{PYTHON_MAJOR_VERSION}}
#See run-python.sh script
#export PYTHON_MAJOR_VERSION={{PYTHON_MAJOR_VERSION}}

# See https://github.com/pypa/setuptools/issues/2353
export SETUPTOOLS_USE_DISTUTILS=stdlib
#virtualenv --version

if [ -f ${HOME}/run-python.sh ]; then
  echo -e "${green} ${HOME}/run-python.sh ${NC}"
  #source ${HOME}/run-python.sh
fi

#sudo pip3.8 install setuptools virtualenvwrapper
#export WORKON_HOME=/opt/ansible/
#export VIRTUALENVWRAPPER_PYTHON=/opt/ansible/env/bin/python
#export VIRTUALENVWRAPPER_VIRTUALENV=/opt/ansible/env/bin/virtualenv

# user virtualenv from user
if [ -d "${HOME}/.local/bin" ]; then
  export PATH=${HOME}/.local/bin:${PATH}
fi

##source /usr/local/bin/virtualenvwrapper.sh
#source /opt/ansible/env/bin/virtualenvwrapper.sh

if command -v conda; then
  echo -e "${green} ansible found ${NC}"
  ## >>> conda initialize >>>
  ## !! Contents within this block are managed by 'conda init' !!
  #__conda_setup="$('/workspace/users/albandrieu30/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
  #if [ $? -eq 0 ]; then
  #    eval "$__conda_setup"
  #else
  #    if [ -f "/workspace/users/albandrieu30/anaconda3/etc/profile.d/conda.sh" ]; then
  #        . "/workspace/users/albandrieu30/anaconda3/etc/profile.d/conda.sh"
  #    else
  #        export PATH="/workspace/users/albandrieu30/anaconda3/bin:$PATH"
  #    fi
  #fi
  #unset __conda_setup
  ## <<< conda initialize <<<
  conda deactivate || true
else
  echo -e "${red} conda not found in system PATH, please make sure that conda is installed ${NC}"
fi

#export PYTHON_DIR={{PYTHON_DIR}}
#export VIRTUALENV_PATH=/opt/ansible/env$(echo $PYTHON_MAJOR_VERSION | sed -r 's/\.//g')
#echo "sudo virtualenv ${VIRTUALENV_PATH} -p {{PYTHON_EXE}}"
#export PATH="${VIRTUALENV_PATH}/bin:${PATH}"
#export PYTHONPATH="${VIRTUALENV_PATH}/lib/python${PYTHON_MAJOR_VERSION}/site-packages/"
#source ${VIRTUALENV_PATH}/bin/activate
#. ${VIRTUALENV_PATH}/bin/activate

# JAVA
#JDK_HOME=/usr/lib/jvm/ia32-java-6-sun-1.6.0.06/
#JDK_HOME=${DRIVE_PATH}/Sun/SDK/jdk
if [ "${ARCH}" = winnt -o "${ARCH}" = cygwin ]; then
  ln -s ${DRIVE_PATH}/Program\ Files\ \(x86\) /ProgramFilesx86
  #export JAVA_HOME="/ProgramFilesx86/Java/jdk1.5.0_22"
fi
#export JAVA_HOME={{JAVA_HOME}}
export JAVA_HOME="$(update-alternatives --query java | grep 'Value: ' | sed -e 's/Value: //;s?/bin/java??;')"
#ls /etc/profile.d/jdk.sh # seems to be installed by oracle-java8-set-default

export JAVA_OPTS="{{JAVA_OPTS}}"

if [ -z "$JAVA_OPTS" ]; then

  echo -e "${cyan} Enable JAVA_OPTS : ${JAVA_OPTS} ${NC}"

  #JAVA_OPTS="${JAVA_OPTS} -Xms256m -Xmx1548m"
  #JAVA_OPTS="${JAVA_OPTS} -XX:PermSize=430m -XX:MaxPermSize=430m -Dsun.rmi.dgc.client.gcInterval=3600000 -Dsun.rmi.dgc.server.gcInterval=3600000"
  JAVA_OPTS="${JAVA_OPTS} -Djava.awt.headless=true "
  #For Jenkins
  JAVA_OPTS="${JAVA_OPTS} -Dakka.test.timefactor=2"
  #Turn off jvmstat instrumentation https://stackoverflow.com/questions/76327/how-can-i-prevent-java-from-creating-hsperfdata-files
  #JAVA_OPTS="${JAVA_OPTS} -XX:-UsePerfData"
  #Fix GZip issue
  #JAVA_OPTS="-Dsun.zip.disableMemoryMapping=true"
  #Use better entropie unlimited random
  #JAVA_OPTS="${JAVA_OPTS} -Djava.security.egd=file:/dev/urandom"
  #JAVA_OPTS="${JAVA_OPTS} -Djava.io.tmpdir=${WORKSPACE}/target/tmp" # tmp get full

  echo -e "${cyan} DEFAULT JAVA_OPTS=${JAVA_OPTS} ${NC}"
fi

if [ {{DEV_MODE}} -eq 1 ]; then
  #export ECLIPSE_DEBUG_PORT="{{ECLIPSE_DEBUG_PORT}}"
  if [ -n "$ECLIPSE_DEBUG_PORT" ]; then
    echo -e "${cyan} Enable ECLIPSE_DEBUG_PORT : ${ECLIPSE_DEBUG_PORT} ${NC}"

    JAVA_OPTS="${JAVA_OPTS} {{DEBUG_OPTIONS}}"

    echo -e "${cyan} DEBUG JAVA_OPTS=${JAVA_OPTS} ${NC}"
  fi

  #export JMX_DEFAULT_DEBUG_PORT="{{JMX_DEFAULT_DEBUG_PORT}}"
  if [ -n "$JMX_DEFAULT_DEBUG_PORT" ]; then
    #On your remote server (the one you want to get statistics
    #Following line is needed for tomcat to be remotely seen by jvisualvm
    #jstatd -J-Djava.security.policy=all.policy -p 2020
    #Add credentials
    #gedit ~/.java.policy
    #grant codebase "file:${java.home}/../lib/tools.jar" {
    #  permission java.security.AllPermission;
    #};
    #Disable firewall if any or do a ssh tunneling
    #ssh -D 9696 albandri@albandri -v

    #these lines activate jmx for visualvm to see threads ; chosen  port is to be entered in â€˜add jmx connectionâ€™ params
    # for instance : albandri:9193 if $JMX_PORT=9193

    echo -e "${cyan} Enable JMX_DEFAULT_DEBUG_PORT : ${JMX_DEFAULT_DEBUG_PORT} ${NC}"

    JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote"
    #JAVA_OPTS="${JAVA_OPTS} -Djava.rmi.server.hostname=albandri"
    JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.port=${JMX_DEFAULT_DEBUG_PORT}"
    JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.ssl=false"
    JAVA_OPTS="${JAVA_OPTS} -Dcom.sun.management.jmxremote.authenticate=false"

    echo -e "${cyan} JMX JAVA_OPTS=${JAVA_OPTS} ${NC}"

    #JSTATD POLICY for JMX
    POLICY=${HOME}/.jstatd.all.policy
    [ -r ${POLICY} ] || cat >${POLICY} <<'POLICY'
grant codebase "file:${java.home}/../lib/tools.jar" {
permission java.security.AllPermission;
};
POLICY

    echo -e "${cyan} jstatd -J-Djava.security.policy=${POLICY} ${NC}"

  fi

  #YOURKIT_HOME
  export YOURKIT_HOME="{{YOURKIT_HOME}}"

  if [ -n "$YOURKIT_HOME" ]; then
    echo -e "${cyan} Enable YOURKIT_HOME : ${YOURKIT_HOME} ${NC}"

    #rm -Rf yjp-*
    #wget https://www.yourkit.com/download/yjp-2015-build-15082.zip
    #unzip yjp-2015-build-15082.zip
    #rm -f yjp-2015-build-15082.zip

    YOURKIT_AGENT_ARCH="${ARCH}-x86-64"
    YOURKIT_AGENT="${YOURKIT_HOME}/bin/${YOURKIT_AGENT_ARCH}/libyjpagent.so"
    JAVA_OPTS="-agentpath:${YOURKIT_AGENT}=disablestacktelemetry,disableexceptiontelemetry,delay=10000,sessionname=Tomcat ${JAVA_OPTS}"

    echo -e "${cyan} DEBUG YOURKIT JAVA_OPTS=${JAVA_OPTS} ${NC}"
  fi

  #JREBEL
  export JREBEL_HOME="{{JREBEL_HOME}}"

  if [ -n "$JREBEL_HOME" ]; then
    echo -e "${cyan} Enable JREBEL_HOME : ${JREBEL_HOME} ${NC}"

    #rm -Rf jrebel*
    #wget http://dl.zeroturnaround.com/jrebel-stable-nosetup.zip
    #unzip jrebel-stable-nosetup.zip
    JAVAAGENT_JREBEL_OPTS="\"${JREBEL_HOME}/jrebel.jar\""
    JAVA_OPTS="${JAVA_OPTS} -javaagent:\"${JAVAAGENT_JREBEL_OPTS}\" -Drebel.remoting_plugin=true"

    echo -e "${cyan} DEBUG JAVAAGENT_JREBEL_OPTS=${JAVAAGENT_JREBEL_OPTS} ${NC}"
  fi

  if [ -n "$JACOCO_AGENT_HOME" ]; then
    echo -e "${cyan} Enable JACOCO_AGENT_HOME : ${JACOCO_AGENT_HOME} ${NC}"

    #rm -Rf org.jacoco*
    #wget http://central.maven.org/maven2/org/jacoco/org.jacoco.agent/${JACOCO_AGENT_VERSION}/org.jacoco.agent-${JACOCO_AGENT_VERSION}.jar

    if [ -z "$JACOCO_AGENT_VERSION" ]; then
      JACOCO_AGENT_VERSION="0.8.5"
    fi
    JACOCO_AGENT_REPORT_FILE="destfile=\"${SRV_LOG_DIR}jacoco.exec\""
    #Can also be output=tcpserver

    JAVAAGENT_JACOCO_OPTS="\"${JACOCO_AGENT_HOME}/org.jacoco.agent-${JACOCO_AGENT_VERSION}-runtime.jar\"=${JACOCO_AGENT_REPORT_FILE}"
    JAVA_OPTS="${JAVA_OPTS} -javaagent:${JAVAAGENT_JACOCO_OPTS}"

    echo -e "${cyan} DEBUG JAVAAGENT_JACOCO_OPTS=${JAVAAGENT_JACOCO_OPTS} ${NC}"
  fi

  # ---- DripStat arguments
  #DS_JAR=/usr/share/${TOMCAT_BASE}/dripstat/dripstat.jar;
  #export DS_JAR
  #JAVA_OPTS="$JAVA_OPTS -javaagent:$DS_JAR";
  #export JAVA_OPTS
fi

# MAVEN
export M2_HOME={{M2_HOME}}
export M2=${M2_HOME}/bin
export PATH=${M2}:$PATH
#export MAVEN_OPTS="-Xms512m -Xmx1024m"
#export MAVEN_OPTS="-Xmx512M -XX:MaxPermSize=1024M"
#export MAVEN_OPTS="-Xms256m -Xmx512m -XX:PermSize=64M -XX:MaxPermSize=160M"
#setenv MAVEN_OPTS "-Djava.net.preferIPv4Stack=true"
#setenv MAVEN_OPTS "org.pitest:pitest-maven:mutationCoverage -Dtomcat.port=$TOMCAT_PORT -Djetty.port=$JETTY_PORT -Dcargo.rmi.port=$CARGO_RMI_PORT -Dcargo.http.port=$CARGO_HTTP_PORT -Dcargo.ssh.port=$CARGO_SSH_PORT -Dcargo.debug.port=$CARGO_DEBUG_PORT -Dcargo.telnet.port=$CARGO_TELNET_PORT"
#setenv MAVEN_OPTS "-Djacoco.outputDir=${WORKSPACE}/target -Dsonar.branch=${SONAR_BRANCH} -Dsonar.scm.enabled=false -Dsonar.scm-stats.enabled=false -Dissueassignplugin.enabled=false -Dsonar.pitest.mode=skip -Dsonar.scm.user.secured=false"
#Jenkins We have 48GB RAM and 44 GB swap and its 24 core server.
#-Xms24g -Xmx24g -Xmn6g -XX:MaxPermSize=512M -XX:+UseParallelOldGC -XX:ParallelGCThreads=16
#Add MaxPermSize for andromda
#for java 8 PermSize and MaxPermSize can be removed
MAVEN_OPTS="{{MAVEN_OPTS}}"
#https://developer.atlassian.com/docs/advanced-topics/working-with-maven/colour-coding-your-maven-output
export MAVEN_COLOR=true

# -Djava.awt.headless=true
#see viewer tool https://github.com/chewiebug/GCViewer
#java -jar target/gcviewer-1.35-SNAPSHOT.jar gc.log export gc.png
#jps
#jmap -histolive PID
#jmap -dump:live,format=b,file=heap.hprof  PID
#sudo jmap -heap $(pgrep -u jenkins java)
#jhat heap.hprof
if [ {{DEV_MODE}} -eq 1 ]; then
  #with gc info dump in file gc.log -XX:+PrintGCDetails -Xloggc:gc.log
  #MAVEN_OPTS="${MAVEN_OPTS} -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:gc.log -XX:+HeapDumpOnOutOfMemoryError"
  #Add jitwatch https://github.com/AdoptOpenJDK/jitwatch/wiki/Instructions
  #MAVEN_OPTS="${MAVEN_OPTS} -XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading -XX:+LogCompilation -XX:LogFile=hotspot.log"
  MAVEN_OPTS="${MAVEN_OPTS}"
fi
export MAVEN_OPTS

export M2_REPO={{MAVEN_LOCAL_REPO_PATH}}
mkdir -p ${M2_REPO} || true
mkdir "${HOME}/.m2" 2>/dev/null
#ln -s "${M2_REPO}/" "${HOME}/.m2/repository/" || true
#echo -e "${cyan} Maven repo is in : ${M2_REPO} ${NC}"

# ANT
#export ANT_HOME={{ANT_HOME}}
#export PATH=${ANT_HOME}/bin:${ANT_HOME}/lib:$PATH
#export ANT_OPTS="-Xmx512m"

# JBOSS
#export JBOSS_HOME={{JBOSS_HOME}}
#export PATH=${JBOSS_HOME}/bin:$PATH
#export BEES_HOME="${DRIVE_PATH}/cloudbees-sdk-{{BEES_VERSION}}"
#export PATH=${BEES_HOME}:$PATH

# TOMCAT
export CATALINA_HOME={{CATALINA_HOME}}
# Customize tomcat in CATALINA_BASE
export CATALINA_BASE={{CATALINA_BASE}}
CATALINA_OPTS=""
#CATALINA_OPTS="-Dappserver.home=$CATALINA_HOME -Dappserver.base=$CATALINA_HOME -Dapplication.property.dir=${CATALINA_HOME}/project"
if [ {{DEV_MODE}} -eq 1 ]; then
  CATALINA_OPTS="{{DEBUG_OPTIONS}} -Djava.compiler=NONE $CATALINA_OPTS"
fi

if [ {{DEV_MODE}} -eq 1 ]; then
  # ---- New Relic switch automatically added to start command on 2015 Jan 14, 14:16:32
  NR_JAR="/usr/share/${TOMCAT_BASE}/newrelic/newrelic.jar"
  export NR_JAR
  CATALINA_OPTS="$CATALINA_OPTS -javaagent:$NR_JAR"
fi

export CATALINA_OPTS

# ZAPROXY
export ZAPROXY_HOME={{ZAPROXY_HOME}}

# JMETER
export JMETER_HOME={{JMETER_HOME}}

# PHANTOMJS
#export PHANTOMJS_BIN=$(which phantomjs)

# CHROME
export CHROME_BIN={{CHROME_BIN}}
export FONTCONFIG_PATH=/etc/fonts
# before launching chromium-browser

# LUMBERMILL
#export LUMBERMILL_HOME="${DRIVE_PATH}/lumbermill-{{LUMBERMILL_MAJOR_VERSION}}"
#export PATH=${LUMBERMILL_HOME}/bin:${PATH}
#echo -e "${cyan} Lumbermill port is {{LOG4J_SERVER_PORT}} ${NC}"

# GRAPHVIZ
if [ "${ARCH}" = winnt -o "${ARCH}" = cygwin ]; then
  export GRAPHVIZ_HOME=${DRIVE_PATH}/Graphviz{{GRAPHVIZ_MAJOR_VERSION}}
  export PATH=${GRAPHVIZ_HOME}/bin:${PATH}
else
  export GRAPHVIZ_HOME=/usr/share/graphviz/
fi

# ORACLE CLIENT
#export ORACLE_CLIENT_HOME=/usr/lib/oracle/12.2/client64
export ORACLE_CLIENT_HOME=/opt/oracle/instantclient_12_2/
export TNS_ADMIN=/opt/oracle/instantclient_12_2/
export LD_LIBRARY_PATH=${ORACLE_CLIENT_HOME}/lib:$LD_LIBRARY_PATH
export PATH=${ORACLE_CLIENT_HOME}/bin:$PATH

export LD_LIBRARY_PATH=/opt/oracle/instantclient_12_2:$LD_LIBRARY_PATH
export PATH=/opt/oracle/instantclient_12_2:$PATH

# DOCKER
export DOCKER_CLIENT_TIMEOUT=240
export COMPOSE_HTTP_TIMEOUT=2000
# See https://stackoverflow.com/questions/64221861/an-error-failed-to-solve-with-frontend-dockerfile-v0
export DOCKER_BUILDKIT=0
export BUILDKIT_STEP_LOG_MAX_SIZE=50000000
export COMPOSE_DOCKER_CLI_BUILD=0
export DOCKER_REGISTRY_USER={{DOCKER_REGISTRY_USER}}
#export DOCKER_REGISTRY_PASS={{DOCKER_REGISTRY_PASS}}
# docker rootless
#export DOCKER_HOST=unix:///run/user/1000/docker.sock

# WINDOWS
if [ "${ARCH}" = winnt -o "${ARCH}" = cygwin ]; then
  export PATH=$PATH:${DRIVE_PATH}/Windows/system32:${DRIVE_PATH}/Windows
fi

# KUBERNETES
# https://github.com/ubuntu/microk8s/issues/56
# Creating a wrapper shell script (kubectlx) that runs kubectl with the kubeconfig option
#echo -e '#!/bin/bash \nkubectl --kubeconfig=$HOME/.kube/config $@' > /snap/bin/kubectlxx
# Making the wrapper shell script executable
#chmod +x /snap/bin/kubectlxx
#function kubectl() { echo "+ kubectlxx $@">&2; command kubectlxx $@; }

if [ ! -f ~/.kubectl_aliases ]; then
  wget https://raw.githubusercontent.com/ahmetb/kubectl-alias/master/.kubectl_aliases -P $HOME/
fi

[ -f ~/.kubectl_aliases ] && source \
  <(cat ~/.kubectl_aliases | sed -r 's/(kubectl.*) --watch/watch \1/g')

# Setting a shell alias for kubectlx
#echo "alias kubectl=kubectlx" >> ~/.bash_profile
#unalias kubectl
#alias kubectl=kubectlx
#snap alias microk8s.kubectl kubectl
#complete -F __start_kubectl k
#export KUBECONFIG=$KUBECONFIG:config:config-albandri
#export KUBECONFIG=$HOME/.kube/config
#source <(kubectlx completion bash)
#source <(k completion bash)

#kubectx and kubens
#export PATH=~/.kubectx:$PATH
if [ -d "${HOME}/.kubectx" ]; then
  PATH="${HOME}/.kubectx:${PATH}"
fi
#export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"
if [ -d "${HOME}/.krew/bin" ]; then
  PATH="${HOME}/.krew/bin:${PATH}"
fi

# BREW PATH
# Must be run after run-python.sh

if [ -d "${HOME}/.linuxbrew/bin" ]; then
  PATH="${HOME}/.linuxbrew/bin:${PATH}"
fi
if [ -d "${HOME}/.git-radar" ]; then
  PATH="${HOME}/.git-radar/:${PATH}"
fi
if [ -d "/home/linuxbrew/.linuxbrew/bin/" ]; then
  PATH="/home/linuxbrew/.linuxbrew/bin/:${PATH}"
fi
if [ -d "/opt/Symantec/symantec_antivirus/" ]; then
  PATH="/opt/Symantec/symantec_antivirus/:${PATH}"
fi
if [ -d "/opt/mssql-tools/bin" ]; then
  PATH="/opt/mssql-tools/bin:${PATH}"
fi
if [ -d "${HOME}/.poetry/bin" ]; then
  PATH="${HOME}/.poetry/bin:${PATH}"
fi
#poetry --version
if [ -d "${HOME}/.cargo/bin" ]; then
  PATH="${HOME}/.cargo/bin:${PATH}"
  . "${HOME}/.cargo/env"
fi

#export GOPATH="${PROJECT_HOME}/${PROJECT_USER}${PROJECT_MAJOR_VERSION}"
export GOPATH=/usr/bin/go/
if [ -f "${GOPATH}/bin/go" ]; then
  PATH="/usr/bin/go/bin:${PATH}"
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

# added by travis gem
[ -f ${HOME}/.travis/travis.sh ] && source ${HOME}/.travis/travis.sh

#export PATH=$PATH:~/.fabric8/bin

#export PATH=/usr/local/bin:/usr/sbin:/sbin:/usr/bin:/bin:${PATH}

###
# INCLUDE LANGUAGE SPECIFIC
###

# BITCOIN

export BDB_PREFIX="${PROJECT_HOME}/${PROJECT_USER}${PROJECT_MAJOR_VERSION}/bitcoin/db4"
export ASAN_SYMBOLIZER_PATH='/usr/bin/llvm-symbolizer'

#AddressSanitizer to sanitize your code!
#export ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-3.8
export ASAN_OPTIONS=alloc_dealloc_mismatch=0,symbolize=1

##
# Alias
##
# See ~/.bash_aliases

#export M2_SETTINGS={{M2_SETTINGS}}
#alias mvn="mvn -s ${M2_SETTINGS}"
#echo "Maven settings is in : ${M2_SETTINGS}"

# PATH Setting
#source ${WORKSPACE_ENV}/java/dev.env.sh
#source ${WORKSPACE_ENV}/cpp/dev.env.sh
#GIT
#git config --global http.sslVerify false
#export GIT_SSL_NO_VERIFY=true
export GIT_DISCOVERY_ACROSS_FILESYSTEM=1

# for yarn, npm
#export NODE_TLS_REJECT_UNAUTHORIZED=0

#see source ~/.git-prompt.sh in .bashrc

source ${HOME}/.novarc

####### TRY TO CHANGE PATH TO BE IN THE CURRENT ENVIRONMENT DEVELOPMENT PATH

OLD_PATH=$(pwd)
NEW_PATH=$(echo ${OLD_PATH} | sed -e "s/\/${PROJECT_USER}[^\/]*/\/${PROJECT_USER}${PROJECT_VERSION}/")

if [ "${OLD_PATH}" != "${NEW_PATH}" ]; then
  if [ -d "${NEW_PATH}" ]; then
    cd ${NEW_PATH}
    echo -e "${cyan} Current path UPDATED cd $(pwd) ${NC}"
    #  else
    #        echo -e "${cyan} Current path : `pwd` ${NC}"
  fi
fi

case ${ARCH} in
  rs6000)
    export LIBPATH=${LD_LIBRARY_PATH}
    unset LD_LIBRARY_PATH
    ;;
esac

#If you put below it will hard code DISPLAY and you will not be able to connect
#export DISPLAY=localhost:10.0
#export DISPLAY={{WORKSTATION_REMOTE}}

# Instead of ansible local role
export LANGUAGE={{ LANG }}
export LANG={{ LANG }}
export LC_ALL={{ LANG }}
export LC_CTYPE={{ LANG }}

#to get man in color
export PAGER={{ PAGER }}

export ANSIBLE_NOCOWS=1

export COWSAY="{{COWSAY}}/cowsay"
if [ -f $COWSAY ]; then
  command -v rl 2>&1 >/dev/null || {
    echo -e "rl | randomize-lines not found in system PATH, please make sure that randomize-lines is installed"
    echo -e "rl | brew install randomize-lines"
    echo -e "rl | apt-get install fortunes fortunes-fr"
    #exit 1
  }
  if [ -f /usr/bin/rl ]; then
    {{COWSAY}}/cowsay -f $(ls /usr/share/cowsay/cows/ | rl | tail -n 1 | cut -d'.' -f1) "$(/usr/games/fortune -s)"
  fi
else
  echo -e "${red} ${double_arrow} Cowsay is not installed ${head_skull} ${NC}"
fi

#export SHELLCHECK_OPTS="-e SC2154 -e SC2086"

command -v docker 2>&1 >/dev/null || {
  echo -e "Docker | docker not found in system PATH, please make sure that docker is installed ${NC}"
  #	exit 1
}
command -v docker-compose 2>&1 >/dev/null || {
  echo -e "Docker | docker-compose not found in system PATH, please make sure that docker-compose is installed ${NC}"
  #	exit 1
}

# KEICHAIN to avoid passphrase prompt

if [ -z "$SSH_AUTH_SOCK" ]; then
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/id_ed25519
  #ssh-add ~/.ssh/aandrieu_ed25519
fi

# is this an interactive shell?
if [[ $- == *i* ]]; then
  # set up ssh key server
  if [[ -x /usr/bin/keychain ]]; then
    eval $(keychain --eval --ignore-missing ~/.ssh/id_ed25519)
  fi
fi

source "${PROJECT_DEV}/nabla/env/home/pass.env.sh"

echo -e "${cyan} PATH is ${PATH} ${NC}"

#exit 0
