---
# This playbook contains common plays that will be run on all nodes.

- name: shell | Install bash shell (Debian only)
  apt: pkg={{ item }} state=present
  when: ansible_distribution == 'Debian'
  with_items:
    - bash
#    - csh
#    - ksh

- name: shell | Create env directory
#  file: path={{ shell_env_directory }} state=directory
  file: path={{ shell_env_directory }} state=directory mode=0700 owner={{ shell_owner }}

- name: shell | Configure dev.env.sh file
  template: src=dev.env.sh.j2 dest={{shell_env_directory}}/dev.env.sh
  tags: configure

#cygwin
- name: shell | Configure .bashrc file
  template: src=.bashrc-cygwin.j2 dest={{home}}/.bashrc
  when: shell_cygwin_enabled
  tags: configure
  tags: cygwin

- name: shell | Configure .bashrc file
  template: src=.bashrc.j2 dest={{home}}/.bashrc
  when: shell_cygwin_enabled == false
  tags: configure

- name: shell | Create temporary directory
  shell: mktemp -d
  register: tempdir
  sudo: true
  tags: shell_setup
  
- name: git | Configure git meld diff
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_git_meld_enabled
  copy: src=git-diff.sh dest={{ shell_git_meld_directory }}/git-diff.sh owner={{ shell_owner }} group={{ shell_group }} mode=755  
  tags: git  
  
#TODO by hand, add inside
#$HOME/.gitconfig
#[diff]
#        external = /usr/local/bin/git-diff.sh  
  
- name: git | Configure git completion
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_git_completion_enabled
  copy: src=.git-prompt.sh dest={{home}}/.git-prompt.sh owner={{ shell_owner }} group={{ shell_group }} mode=755
  tags: git  
    
- name: nano | Copy the nano code from repository
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_nano_enabled
  git: repo={{ shell_nano_color_repository }} dest={{home}}/nanorc
  tags: nano
  
- name: nano | Configure nano-configure.sh file
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_nano_enabled and shell_cygwin_enabled == false
  template:
    src: nano-configure.sh.j2
    dest: '{{ shell_dir_tmp }}/nano-configure.sh'
    owner: '{{ shell_owner }}'
    group: '{{ shell_group }}'
    mode: 0755
  tags: nano

- name: shell | Update  ~/.nanorc 
  action: shell '{{ shell_dir_tmp }}/nano-configure.sh'
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_nano_enabled
  tags: nano

- name: shell | Configure inputrc-configure.sh file
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_history_enabled and shell_cygwin_enabled == false
  template:
    src: inputrc-configure.sh.j2
    dest: '{{ shell_dir_tmp }}/inputrc-configure.sh'
    owner: '{{ shell_owner }}'
    group: '{{ shell_group }}'
    mode: 0755
  tags: history

- name: shell | Update  ~/.inputrc 
  action: shell '{{ shell_dir_tmp }}/inputrc-configure.sh'
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_history_enabled
  tags: history

- name: shell | Install locate search tools
  apt: pkg={{ item }} state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_locate_enabled
  tags: package
  with_items:
   - locate
   
- name: shell | Install synapse search tools
  apt: pkg={{ item }} state=present update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  tags: package
  with_items:
   - synapse
   
- name: shell | Create synapse directory
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  file: path={{ shell_synapse_directory }} state=directory mode=0700 owner={{ shell_owner }}
  
- name: shell | Copy synapse startpage search into place
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  copy: src=startpage.xml dest={{ shell_synapse_directory }} owner={{ shell_owner }} group={{ shell_group }} mode=644
  tags: synapse
    
- name: shell | Copy duckduckgo startpage search into place
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  copy: src=duckduckgo.xml dest={{ shell_synapse_directory }} owner={{ shell_owner }} group={{ shell_group }} mode=644
  tags: synapse
      
- name: shell | Configure synapse config.json file
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  template:
    src: config.json.j2
    dest: '{{ shell_synapse_directory }}/config.json'
    owner: '{{ shell_owner }}'
    group: '{{ shell_group }}'
    mode: 0755
  tags: synapse  
  
- name: shell | Update locate database
  action: command updatedb
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_locate_enabled
  tags: locate

- name: shell | Cleanup temporary directory
  file: name={{ tempdir.stdout }} state=absent
  tags: shell_setup
