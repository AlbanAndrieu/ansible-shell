---
# This playbook contains common plays that will be run on all nodes.

- name: shell | Install bash shell (Debian only)
  apt: pkg={{ item }} state=present
  when: ansible_distribution == 'Debian'
  with_items:
    - bash
#    - csh
#    - ksh

- name: shell | Create env directory
#  file: path={{ shell_env_directory }} state=directory
  file: path={{ shell_env_directory }} state=directory mode=0700 owner={{ shell_owner }}

- name: shell | Configure dev.env.sh file
  template: src=dev.env.sh.j2 dest={{shell_env_directory}}/dev.env.sh
  tags: bash

- name: shell | Configure .bash_profile file
  copy: src=.bash_profile dest={{home}}/.bash_profile
  tags: bash
#  tags: cygwin

- name: shell | Configure .bash_aliases file
  copy: src=.bash_aliases dest={{home}}/.bash_aliases
  tags: bash
#  tags: cygwin

- name: shell | Configure .login file
  copy: src=.login dest={{home}}/.login
  tags: bash
#  tags: cygwin

- name: shell | Install git prompt git-radar requirements
  apt: pkg={{ item }} state=present
  when: ansible_distribution == 'Debian'
  with_items:
    - build-essential
    - curl
    - git
    - m4
    - ruby
    - texinfo
    - libbz2-dev
    - libcurl4-openssl-dev
    - libexpat-dev
    - libncurses-dev
    - zlib1g-dev
    - linuxbrew-wrapper

- name: shell | Install git prompt git-radar
  shell: brew install michaeldfallen/formula/git-radar
  when: ansible_distribution == 'Debian'
  become: yes

- name: shell | Install docker prompt
  shell: wget https://raw.githubusercontent.com/docker/machine/master/contrib/completion/bash/docker-machine-prompt.bash -O /etc/bash_completion.d/docker-machine-prompt.bash
  when: ansible_distribution == 'Debian'

- name: shell | Install docker wrapper
  shell: wget https://raw.githubusercontent.com/docker/machine/master/contrib/completion/bash/docker-machine-wrapper.bash -O /etc/bash_completion.d/docker-machine-wrapper.bash
  when: ansible_distribution == 'Debian'

- name: shell | Install docker bash
  shell: wget https://raw.githubusercontent.com/docker/machine/master/contrib/completion/bash/docker-machine.bash -O /etc/bash_completion.d/docker-machine.bash
  when: ansible_distribution == 'Debian'

#cygwin
- name: shell | Configure .bashrc file
  template: src=.bashrc-cygwin.j2 dest={{home}}/.bashrc
  when: shell_cygwin_enabled
  tags: configure
#  tags: cygwin

- name: shell | Configure .bashrc file
  template: src=.bashrc.j2 dest={{home}}/.bashrc
  when: shell_cygwin_enabled == false
  tags: bash

- name: shell | Create temporary directory
  shell: mktemp -d
  register: tempdir
  tags: shell_setup

- name: shell | Copy the .novarc script for openstack
  template: src=.novarc.j2 dest={{ home }}/.novarc mode=0600 owner={{ shell_owner }}
  changed_when: false
  tags: openstack

- name: git | Configure git meld diff
  copy: src=git-diff.sh dest={{ shell_git_meld_directory }}/git-diff.sh owner={{ shell_owner }} group={{ shell_group }} mode=755
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_git_meld_enabled
  become: true
  tags: git

- name: git | Configure git completion
  copy: src=.git-prompt.sh dest={{ home }}/.git-prompt.sh owner={{ shell_owner }} mode=755
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_git_completion_enabled
  tags: git

- name: git | Copy the .netrc script for git credentials
  template: src=.netrc.j2 dest={{ home }}/.netrc mode=0600 owner={{ shell_owner }}
  when: shell_git_configure_enabled
  changed_when: false
  tags: git

- name: git | Configure git
  template:
    src: .gitconfig.j2
    dest: '{{ home }}/.gitconfig'
    owner: '{{ shell_owner }}'
    mode: 0700
  when: shell_git_configure_enabled
  changed_when: false
  tags: git

#- git_config: name=user.email scope=global value="{{ shell_git[0].shell_git_email }}"
#- git_config: name=user.name scope=global value="{{ shell_git[0].shell_git_name }}"
#- git_config: name=http.sslVerify scope=global value="{{ shell_git[0].shell_git_ssl }}"
- git_config: name=maven-scm.maildomain scope=global value="nabla.mobi"
- git_config: name=maven-scm.forceUsername scope=global value="true"

- git_config: name=alias.ci scope=global value=commit
- git_config: name=alias.st scope=global value=status
- git_config: name=color.ui scope=global value=auto

#See https://docs.ansible.com/ansible/git_config_module.html
- name: git | Read all values from git config
  git_config: list_all=yes scope=global

#- name: Install enhanced vim with command-t plugin
#  yum: name={{item}} state=present
#  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
#  with_items:
#    - vim-enhanced
#    - vim-command-t
#
#- name: Clone dotvim repo
#  git: dest={{home}}/.vim repo=git@github.com:sheldonh/dotvim.git update=no
#
#- name: Link dotvim config to vimrc
#  file: path={{home}}/.vimrc src={{home}}/.vim/vimrc state=link

- name: vim | Copy the vim code from repository
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_vim_enabled
  git: repo={{ shell_vim_color_repository }} dest={{home}}/.vim accept_hostkey=yes
  tags: vim

- name: vim | Configure vim-configure.sh file
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_vim_enabled
  template:
    src: vim-configure.sh.j2
    dest: '{{ shell_dir_tmp }}/vim-configure.sh'
    owner: '{{ shell_owner }}'
#    group: '{{ shell_group }}'
    mode: 0755
  tags: vim

- name: vim | Update  ~/.vim
  shell: '{{ shell_dir_tmp }}/vim-configure.sh'
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_vim_enabled
  tags: vim

- name: nano | Copy the nano code from repository
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_nano_enabled
  git: repo={{ shell_nano_color_repository }} dest={{home}}/nanorc
  tags: nano

- name: nano | Configure nano-configure.sh file
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_nano_enabled and shell_cygwin_enabled == false
  template:
    src: nano-configure.sh.j2
    dest: '{{ shell_dir_tmp }}/nano-configure.sh'
    owner: '{{ shell_owner }}'
#    group: '{{ shell_group }}'
    mode: 0755
  tags: nano

- name: nano | Update  ~/.nanorc
  shell: '{{ shell_dir_tmp }}/nano-configure.sh'
  args:
    chdir: ~
    creates: .nanorc
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_nano_enabled
  tags: nano

- name: inputrc | Configure inputrc-configure.sh file
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_history_enabled and shell_cygwin_enabled == false
  template:
    src: inputrc-configure.sh.j2
    dest: '{{ shell_dir_tmp }}/inputrc-configure.sh'
    owner: '{{ shell_owner }}'
#    group: '{{ shell_group }}'
    mode: 0755
  tags: history

- name: inputrc | Update  ~/.inputrc
  shell: '{{ shell_dir_tmp }}/inputrc-configure.sh > .inputrc'
  args:
    chdir: ~
    creates: .inputrc
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_history_enabled
  tags: history

- name: maven | Configure maven-configure.sh file
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_maven_enabled
  template:
    src: maven-configure.sh.j2
    dest: '{{ shell_dir_tmp }}/maven-configure.sh'
    owner: '{{ shell_owner }}'
#    group: '{{ shell_group }}'
    mode: 0755
  tags: maven

- name: maven | Color maven command
  shell: '{{ shell_dir_tmp }}/maven-configure.sh > .bash_aliases'
  args:
    chdir: ~
    creates: .bash_aliases
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_maven_enabled
  tags: maven

- name: locate | Install locate search tools
  apt: pkg={{ item }} state=present update_cache=yes
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_locate_enabled
  tags: package
  with_items:
   - locate

- name: locate | Update locate database
  command: updatedb
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_locate_enabled
  tags: locate

- name: synapse | Install synapse search tools
  apt: pkg={{ item }} state=present update_cache=yes
  become: true
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  tags: package
  with_items:
   - synapse

- name: synapse | Create synapse directory
  file: path={{ shell_synapse_directory }} state=directory mode=0700 owner={{ shell_owner }}
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false

- name: synapse | Copy synapse startpage search into place
  copy: src=startpage.xml dest={{ shell_synapse_directory }} owner={{ shell_owner }} group={{ shell_group }} mode=644
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  tags: synapse

- name: synapse | Copy duckduckgo startpage search into place
  copy: src=duckduckgo.xml dest={{ shell_synapse_directory }} owner={{ shell_owner }} group={{ shell_group }} mode=644
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  tags: synapse

- name: synapse | Configure synapse config.json file
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and shell_synapse_enabled and shell_cygwin_enabled == false
  template:
    src: config.json.j2
    dest: '{{ shell_synapse_directory }}/config.json'
    owner: '{{ shell_owner }}'
    group: '{{ shell_group }}'
    mode: 0755
  tags: synapse

- name: shell | Cleanup temporary directory
  file: name={{ tempdir.stdout }} state=absent
  tags: shell_setup
